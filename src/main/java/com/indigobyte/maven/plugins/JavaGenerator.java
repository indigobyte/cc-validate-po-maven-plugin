package com.indigobyte.maven.plugins;

import org.apache.commons.lang3.StringEscapeUtils;
import org.fedorahosted.tennera.jgettext.Message;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class JavaGenerator {
    private static final int MAX_MESSAGE_COUNT = 1000;
    private final Map<String, Object> initLines = new HashMap<>();

    @NotNull
    private static String getJavaEscapedString(@NotNull String str) {
        return "\"" + StringEscapeUtils.escapeJava(str) + "\"";
    }

    public void addInitLine(@NotNull Message message) {
        String key;
        if (message.getMsgctxt() != null) {
            key = message.getMsgctxt() + "\u0004" + message.getMsgid();
        } else {
            key = message.getMsgid();
        }
        if (message.getMsgidPlural() != null && !message.getMsgidPlural().isEmpty()) { //With plural form
            initLines.put(key, message.getMsgstrPlural());
        } else { //No plural form
            initLines.put(key, message.getMsgstr());
        }
    }

    @NotNull
    public String getText(
            @NotNull String fullPackagePath,
            @NotNull String className,
            @Nullable String pluralEval
    ) {
        StringBuilder sb = new StringBuilder();
        sb.append("/* Automatically generated by com.indigobyte.maven.plugins:cc-validate-po-maven-plugin version " + getClass().getPackage().getImplementationVersion() + " */\n" +
                "package " + fullPackagePath + ";\n" +
                "\n" +
                "public class " + className + " extends java.util.ResourceBundle {\n" +
                "    private static final java.util.HashMap<String, Object> table = new java.util.HashMap<>();\n" +
                "\n" +
                "    static {\n"
        );
        int initMethodCount = (initLines.size() + MAX_MESSAGE_COUNT - 1) / MAX_MESSAGE_COUNT;
        for (int methodNumber = 0; methodNumber < initMethodCount; ++methodNumber) {
            sb.append("        clinit_part_" + methodNumber + "();\n");
        }
        sb.append("    }\n" +
                "\n"
        );
        for (int methodNumber = 0; methodNumber < initMethodCount; ++methodNumber) {
            sb.append("    private static void clinit_part_" + methodNumber + "() {\n");
            List<Map.Entry<String, Object>> entries = new ArrayList<>(initLines.entrySet());
            entries = entries.subList(methodNumber * MAX_MESSAGE_COUNT, Math.min(entries.size(), (methodNumber + 1) * MAX_MESSAGE_COUNT));
            for (Map.Entry<String, Object> entry : entries) {
                sb.append("        table.put(");
                sb.append(getJavaEscapedString(entry.getKey()));
                sb.append(", ");
                if (entry.getValue() instanceof String) {
                    sb.append(getJavaEscapedString((String) entry.getValue()));
                } else {
                    sb.append("new String[]{");
                    sb.append(((List<String>) entry.getValue()).stream()
                            .map(JavaGenerator::getJavaEscapedString)
                            .collect(Collectors.joining(", "))
                    );
                    sb.append("}");
                }
                sb.append(");\n");
            }
            sb.append("    }\n" +
                    "\n"
            );
        }
        if (pluralEval != null) {
            sb.append("    public static long pluralEval(long n) {\n" +
                    "        return " + pluralEval + ";\n" +
                    "    }\n"
            );
        }
        sb.append("\n" +
                "    public Object lookup(String msgid) {\n" +
                "        return table.get(msgid);\n" +
                "    }\n" +
                "\n" +
                "    public Object handleGetObject(String msgid) throws java.util.MissingResourceException {\n" +
                "        Object value = lookup(msgid);\n" +
                "        return (value instanceof String[] ? ((String[]) value)[0] : value);\n" +
                "    }\n" +
                "\n" +
                "    public java.util.Enumeration<String> getKeys() {\n" +
                "        return java.util.Collections.enumeration(table.keySet());\n" +
                "    }\n" +
                "\n" +
                "    public java.util.ResourceBundle getParent() {\n" +
                "        return parent;\n" +
                "    }\n" +
                "}\n"
        );
        return sb.toString();
    }
}
